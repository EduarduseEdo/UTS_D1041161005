<resources>
    <string name="app_name">UTS_EDO_D1041161005</string>
    <string name="next">Selanjutnya </string>
    <string name="start"> Selesai</string>
    <string name="contentIntent">Intent adalah sebuah kelas dalam programming Android yang berfungsi untuk perpindahan halaman. Intent juga merupakan suatu objek yang terdapat dalam suatu activity dimana objek tersebut dapat komunikasi dengan activity yang lain, baik activity pada fungsi internal android misal seperti memanggil activity dalam satu package atau beda package yang masih berada dalam satu project.
        \n\nIntent merupakan objek tipe <i>android.content.Intent</i>. Melalui metode <i>startActivity()</i> yang digunakan untuk memulai sebuah activity lain. Intent dibagi menjadi 2, yaitu :
            \n\nExplicit Intent berfungsi untuk mengaktifkan komponen-komponen dalam satu aplikasi yang sama. Misalnya seperti : Berpindah Activity.
            \n\nImplicit Intent berfungsi untuk memanggil fungsi activity yang sudah ada di fungsi internal android seperti Dial Number, Open Browser dan lainnya.</string>
    <string name="syntaxIntent">Import method untuk dapat menggunakan perintah Intent
        \n\n<center><i><font color='#FF7F50'>import</font> <font color='#708090'>android.content.Intent</font><font color='#FF7F50'>;</font></i></center>
            \n\n\nUntuk pindah dari suatu activity ke activity lain dalam suatu aplikasi yang sama, gunakan Explicit Intent
        \n\n<center><i><font color='#708090'>startActivity(</font><font color='#FF7F50'>new</font><font color='#708090'> Intent(Activity1.</font><font color='#FF7F50'>this</font><font color='#708090'>, Activity2.</font><font color='#FF7F50'>class</font><font color='#708090'>))</font><font color='#FF7F50'>;</font></i></center>
            \n\n\nUntuk menggunakan fungsi activity internal yang sudah ada pada android gunakan Implicit Intent, berikut Implicit Intent Open Browser
        \n\n<center><i><font color='#708090'>startActivity(</font><font color='#FF7F50'>new</font><font color='#708090'> Intent(Intent.</font><font color='#9400D3'>ACTION_VIEW</font><font color='#FF7F50'>,</font><font color='#708090'> Uri.parse(</font><font color='#8FBC8F'>\"http://www.codepolitan.com\"</font><font color='#708090'>)))</font><font color='#FF7F50'>;</font></i></center>
            \n
    </string>
    <string name="contentService">Service adalah sebuah komponen aplikasi yang bisa melakukan operasi yang berjalan lama di latar belakang dan tidak menyediakan antarmuka pengguna.
        Komponen aplikasi lain bisa memulai layanan dan komponen aplikasi tersebut akan terus berjalan di latar belakang walaupun pengguna beralih ke aplikasi lain.
        Selain itu, komponen bisa mengikat ke layanan untuk berinteraksi dengannya dan bahkan melakukan komunikasi antarproses (IPC).
        Misalnya, layanan mungkin menangani transaksi jaringan, memutar musik, melakukan file I/O, atau berinteraksi dengan penyedia materi dari latar belakang.
        Inilah tiga tipe layanan yang berbeda:
        \n\nLatar depan
        \nLayanan latar depan melakukan beberapa operasi yang terlihat oleh pengguna. Misalnya, aplikasi audio akan menggunakan layanan latar depan untuk memutar track audio. Layanan latar depan harus menampilkan Notifikasi. Layanan latar depan terus berjalan bahkan saat pengguna tidak berinteraksi dengan aplikasi.
        \n\nLatar belakang
        \nLayanan latar belakang melakukan operasi yang tidak terlihat secara langsung oleh pengguna. Misalnya, jika aplikasi menggunakan layanan untuk memadatkan penyimpanannya, aplikasi tersebut biasanya akan menjadi layanan latar belakang.
        \n\nCatatan: Jika aplikasi Anda menargetkan API level 26 atau yang lebih tinggi, sistem akan mengenakan pembatasan pada layanan latar belakang yang berjalan saat aplikasi tersebut tidak berada di latar depan. Dalam sebagian besar kasus seperti ini, aplikasi Anda harus menggunakan tugas terjadwal.
        \n\nTerikat
        \nSebuah layanan akan terikat bila komponen aplikasi mengikatkan kepadanya dengan memanggil <i>bindService()</i>. Layanan terikat menawarkan antarmuka klien-server yang memungkinkan komponen berinteraksi dengan layanan tersebut, mengirim permintaan, mendapatkan hasil dan bahkan melakukannya pada sejumlah proses dengan komunikasi antarproses (IPC). Layanan terikat hanya berjalan selama komponen aplikasi terikat padanya. Beberapa komponen bisa diikat ke layanan sekaligus, namun bila semuanya telah dilepas, layanan akan dimusnahkan.
        \n\nWalaupun dokumentasi ini umumnya membahas layanan yang dimulai dan terikat secara terpisah, layanan Anda bisa bekerja dengan dua cara—layanan tersebut bisa dimulai (untuk berjalan terus-menerus) dan juga memungkinkan pengikatan. Ini hanyalah masalah apakah Anda mengimplementasikan beberapa metode callback: <i>onStartCommand()</i> untuk memungkinkan komponen memulainya dan <i>onBind()</i> untuk memungkinkan pengikatan.
        \n\nApakah layanan Anda sudah dimulai, terikat, atau keduanya, semua komponen aplikasi bisa menggunakan layanan (bahkan dari aplikasi terpisah), demikian pula semua komponen bisa menggunakan suatu aktivitas—dengan memulainya dengan Intent. Akan tetapi, Anda bisa mendeklarasikan layanan sebagai privat pada file manifes, dan memblokir akses dari aplikasi lain.
        \n
    </string>
    <string name="syntaxService">Anda harus mendeklarasikan semua layanan dalam file manifes aplikasi Anda, persis seperti yang Anda lakukan untuk aktivitas dan komponen lainnya.
        Untuk mendeklarasikan layanan Anda, tambahkan sebuah elemen <font color='#FF7F50'>&lt;service&gt;</font> sebagai anak elemen <font color='#FF7F50'>&lt;application&gt;</font>. Berikut contohnya:
        \n\n<font color='#FF7F50'>&lt;manifest <font color='#FFFFFF'>...</font> &gt;</font>
        \n...
        \n<font color='#FF7F50'>&lt;application <font color='#FFFFFF'>...</font> &gt;</font>
        \n<font color='#FF7F50'>&lt;service <font color='#9400D3'>android:name</font><font color='#FFFFFF'>=</font><font color='#8FBC8F'>\".ExampleService\"</font> /&gt;</font>
        \n...
        \n<font color='#FF7F50'>&lt;/application&gt;
            \n&lt;/manifest&gt;</font>
    </string>
    <string name="contentActivity">
        Activity adalah sebuah komponen aplikasi yang menyediakan layar yang digunakan pengguna untuk berinteraksi guna melakukan sesuatu, misalnya memilih nomor ponsel, mengambil foto, mengirim email, atau menampilkan peta. Tiap aktivitas diberi sebuah jendela untuk menggambar antarmuka penggunanya. Jendela ini biasanya mengisi layar, namun mungkin lebih kecil daripada layar dan mengambang di atas jendela lain.
        \n\nSebuah aplikasi biasanya terdiri atas beberapa aktivitas yang terikat secara longgar satu sama lain. Biasanya, satu aktivitas dalam aplikasi ditetapkan sebagai aktivitas "utama", yang ditampilkan kepada pengguna saat membuka aplikasi untuk pertama kali. Tiap aktivitas kemudian bisa memulai aktivitas lain untuk melakukan berbagai tindakan. Tiap kali aktivitas baru dimulai, aktivitas sebelumnya akan dihentikan, namun sistem mempertahankan aktivitas dalam sebuah tumpukan ("back-stack"). Bila sebuah aktivitas baru dimulai, aktivitas itu akan didorong ke atas back-stack dan mengambil fokus pengguna. Back-stack mematuhi mekanisme dasar tumpukan "masuk terakhir, keluar pertama", jadi, bila pengguna selesai dengan aktivitas saat ini dan menekan tombol Kembali, aktivitas akan dikeluarkan dari tumpukan (dan dimusnahkan) dan aktivitas sebelumnya akan dilanjutkan. (Back-stack dibahas selengkapnya dalam dokumen Tugas dan Back-Stack.)
        \n\nBila aktivitas dihentikan karena ada aktivitas baru yang dimulai, aktivitas lama akan diberi tahu tentang perubahan status ini melalui metode callback daur hidupnya. Ada beberapa metode callback yang mungkin diterima aktivitas, karena sebuah perubahan dalam statusnya—apakah sistem sedang membuatnya, menghentikannya, melanjutkannya, atau menghapuskannya—dan masing-masing callback memberi Anda kesempatan melakukan pekerjaan tertentu yang sesuai untuk perubahan status itu. Misalnya, bila dihentikan, aktivitas Anda harus melepas objek besar, seperti koneksi jaringan atau database. Bila aktivitas dilanjutkan, Anda bisa memperoleh kembali sumber daya yang diperlukan dan melanjutkan tindakan yang terputus. Transisi status ini semuanya bagian dari daur hidup aktivitas.
        \n\nBagian selebihnya dari dokumen ini membahas dasar-dasar cara membangun dan menggunakan aktivitas, yang meliputi satu pembahasan lengkap tentang cara kerja daur hidup aktivitas, sehingga Anda bisa dengan benar mengelola transisi di antara berbagai status aktivitas.
    </string>
    <string name="syntaxActivity">
        Anda harus mendeklarasikan aktivitas dalam file manifes agar file itu bisa diakses oleh sistem. Untuk mendeklarasikan aktivitas, bukalah file manifes Anda dan tambahkan sebuah elemen <font color='#FF7F50'>&lt;activity></font> sebagai anak elemen <font color='#FF7F50'>&lt;application></font>. Misalnya:
        \n\n<font color='#FF7F50'>&lt;manifest <font color='#FFFFFF'>...</font> >
        \n&lt;application <font color='#FFFFFF'>...</font> >
        \n&lt;activity <font color='#9400D3'>android:name</font><font color='#FFFFFF'>=</font><font color='#8FBC8F'>\".ExampleActivity\"</font> />
        \n<font color='#FFFFFF'>...</font>
        \n&lt;/application <font color='#FFFFFF'>...</font> >
        \n<font color='#FFFFFF'>...</font>
        \n&lt;/manifest ></font>
        \n\nAda beberapa atribut lain yang bisa Anda sertakan dalam elemen ini, untuk mendefinisikan properti seperti label untuk aktivitas, ikon untuk aktivitas, atau tema untuk memberi gaya pada UI aktivitas. android:name adalah satu-satunya atribut yang diperlukan—atribut ini menetapkan nama kelas aktivitas. Setelah mempublikasikan aplikasi, Anda tidak boleh mengubah nama ini, karena jika melakukannya, Anda bisa merusak sebagian fungsionalitas, misalnya pintasan aplikasi
        \n\n
    </string>
    <string name="contentBroadcastreceiver">
        Broadcast Receiver merupakan salah satu komponen Android yang bertugas dalam penerima pesan dari sistem atau sebuah aplikasi, bentuk pesan yang dikirim ini bisa berupa event atau invent.
        \n\nBroadcast Receiver ini akan membuat pemberitahuan pada aplikasi bahwa telah ada perubahan, misalnya data telah selesai di unduh, battery tinggal 10% lagi, dsb. Nah pesan yang diterima inilah yang nantinya berfungsi untuk melakukan tindakan apa yang dilakukan selanjutnya.
        \n\nNah, dengan Broadcast Receiver ini aplikasi yang kita kembangkan telah didaftarkan sebagai salah satu penerima pesan untuk suatu kondisi tertentu.
        \n\nJika Anda ingin membuat aplikasi yang “baik”, Broadcast Receiver ini sangat penting. Karena salah satu syarat aplikasi itu bisa dikatakan baik adalah user dapat merasakan dampak kegunaan dari fitur aplikasi secara langsung Contohnya seperti notifikasi pada aplikasi chat yang memberitahu bahwa ada pesan baru, efek bonusnya adalah aplikasi menjadi aktif digunakan.
    </string>
    <string name="syntaxBroadcastreceiver">
        public class Receiver extends BroadcastReceiver {
        \npublic Receiver() {
        \n}
        \n\n@Override
        \npublic void onReceive(Context context, Intent intent) {
        \nToast.makeText(context, "Action: " + intent.getAction(), Toast.LENGTH_SHORT).show();
        \n}
        \n}
    </string>
    <string name="contentContentprovider">
        Penyedia konten dapat membantu aplikasi mengelola akses ke data yang disimpan dengan sendirinya, yang disimpan oleh aplikasi lain, dan memberikan cara untuk membagikan data ke aplikasi lain. Mereka membungkus data, dan menyediakan mekanisme untuk mendefinisikan keamanan data. Penyedia materi adalah antarmuka standar yang menghubungkan data dalam satu proses dengan kode yang berjalan dalam proses lain. Mengimplementasikan penyedia konten memiliki banyak keuntungan. Yang terpenting, Anda dapat mengonfigurasi penyedia konten agar memungkinkan aplikasi lain mengakses dan memodifikasi data aplikasi Anda secara aman
    </string>
    <string name="syntaxContentprovider">
    public class ExampleProvider extends ContentProvider {
    \n...
    \n// Creates a UriMatcher object.
    \nprivate static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    \n\n
    \nstatic {
     \n   /*
     \n    * The calls to addURI() go here, for all of the content URI patterns that the provider
     \n    * should recognize. For this snippet, only the calls for table 3 are shown.
     \n    */

     \n   /*
     \n    * Sets the integer value for multiple rows in table 3 to 1. Notice that no wildcard is used
     \n    * in the path
     \n    */
     \n   uriMatcher.addURI("com.example.app.provider", "table3", 1);

     \n   /*
     \n    * Sets the code for a single row to 2. In this case, the "#" wildcard is
     \n    * used. "content://com.example.app.provider/table3/3" matches, but
     \n    * "content://com.example.app.provider/table3 doesn't.
     \n    */
     \n   uriMatcher.addURI("com.example.app.provider", "table3/#", 2);
    \n}
    \n...
    \n// Implements ContentProvider.query()
    \npublic Cursor query(
    \n    Uri uri,
    \n    String[] projection,
    \n    String selection,
    \n    String[] selectionArgs,
    \n    String sortOrder) {
    \n...
    \n    /*
    \n     * Choose the table to query and a sort order based on the code returned for the incoming
    \n     * URI. Here, too, only the statements for table 3 are shown.
    \n     */
    \n    switch (uriMatcher.match(uri)) {
    \n
     \n       // If the incoming URI was for all of table3
     \n       case 1:
    \n
    \n            if (TextUtils.isEmpty(sortOrder)) sortOrder = "_ID ASC";
    \n            break;
\n
  \n          // If the incoming URI was for a single row
   \n         case 2:
\n
  \n              /*
    \n             * Because this URI was for a single row, the _ID value part is
      \n           * present. Get the last path segment from the URI; this is the _ID value.
        \n         * Then, append the value to the WHERE clause for the query
        \n         */
        \n        selection = selection + "_ID = " + uri.getLastPathSegment();
        \n        break;
\n
  \n          default:
  \n          ...
  \n              // If the URI is not recognized, you should do some error handling here.
  \n      }
  \n      // call the code to actually do the query
  \n  }
    </string>

</resources>
